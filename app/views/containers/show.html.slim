
a href=search_url search items

hr

br
- (@ancestors + [@container]).each.with_index do |ancestor, idx|
  - if idx != 0
  div class='parent-container' data-id=ancestor.id
    - number = idx == @ancestors.length ? "Current" : "##{idx + 1}"
    a href=container_url(ancestor) = "#{number}: #{ancestor.name}"

hr
form method="POST" action=containers_url(id: @container.id)
  input type="hidden" name="authenticity_token" value=form_authenticity_token
  input type="submit" value="create sub container"
  input type="text" name="name" placeholder="name"

hr
form style='display: inline-block' method="POST" action=items_url(container_id: @container.id)
  input type="hidden" name="authenticity_token" value=form_authenticity_token
  input type="submit" value="create item"
  input type="text" name="name" placeholder="name"

span  or 
button id='voice_add' Voice Add

br
div id='voice_results_container'

- unless @container.name == "Root"
  hr
  form style='display: inline-block' method="POST" action=delete_container_url(@container)
    input type="hidden" name="authenticity_token" value=form_authenticity_token
    input type="submit" value="DELETE CONTAINER"

hr
h3
  |  Sub Containers 

- if @subcontainers.any?
  ul
    - @subcontainers.each do |container|
      li class='subcontainer' data-id=container.id
        a href=container_url(container)
          = container.name
- else
  small None yet

hr
h3
  |  Items

- if @items.any?
  ul
    - @items.each do |item|
      li class='item' data-id=item.id
        a href=item_url(item)
          - tags = item.tags.any? ? "(#{item.tags.pluck(:name).join(", ")})" : ""
          = "#{item.name} #{tags}"
- else
  small None yet


div id="ruby-data" style="display: none" = { \
  bulk_create_items_url: bulk_create_items_url(container_id: @container.id), \
  move_object_url: move_object_url(container_id: @container.id), \
  form_authenticity_token: form_authenticity_token, \
}.to_json

css:
  .drop-hover {
    font-weight: bold;
  }

coffeescript:

  SpeechRecognition = window.SpeechRecognition || webkitSpeechRecognition
  SpeechGrammarList = window.SpeechGrammarList || webkitSpeechGrammarList
  SpeechRecognitionEvent = window.SpeechRecognitionEvent || webkitSpeechRecognitionEvent

  break_words = /break|Break|enter|Enter|next|Next|brake|Brake/

  build_speech_recognition = ->
    recognition = new SpeechRecognition()
    speechRecognitionList = new SpeechGrammarList()
    recognition.grammars = speechRecognitionList
    recognition.continuous = true
    recognition.lang = 'en-US'
    recognition.interimResults = false
    recognition.maxAlternatives = 1
    recognition


  $ ->

    $(".item").draggable(
      revert: true,
      revertDuration: 250
    )

    $(".subcontainer").draggable(
      revert: true,
      revertDuration: 250
    )

    $(".subcontainer, .parent-container").droppable(
      hoverClass: "drop-hover",
      drop: (e, ui) =>
        droppable = $(e.target)
        draggable = $(ui.draggable)

        droppableType = if droppable.hasClass("item") then "item" else "container"
        draggableType = if draggable.hasClass("item") then "item" else "container"

        droppableId = droppable.data("id")
        draggableId = draggable.data("id")

        $.post(
          ruby_data.move_object_url,
          {
            droppable_id: droppableId,
            draggable_id: draggableId,
            droppable_type: droppableType,
            draggable_type: draggableType,
            authenticity_token: ruby_data.form_authenticity_token
          }
        )
    )

    ruby_data = JSON.parse $("#ruby-data").text()

    # https://stackoverflow.com/a/32147146/2981429
    setHeight = (selector) =>
        selector.each (idx, elem) ->
            elem.style.height = elem.scrollHeight+'px'

    $start_btn = $("#voice_add")
    $start_btn.on "click", (e) =>
      $results_container = $("#voice_results_container")
      $results_container.empty()

      instructions = "Talk now and say break or next to separate items.\nPress stop when done."
      $textarea = $("<textarea placeholder='#{instructions}'>")
      $results_container.append($textarea.css("width", "500px"))

      $stop_btn = $("<button>").text("Stop")
      $results_container.append($stop_btn.css("display", "block"))

      $submit_btn = $("<button>").text("Submit")
      $results_container.append($submit_btn.css("display", "block"))

      recognition = build_speech_recognition()

      recognition.onresult = (e) =>
        transcript = event.results[event.results.length - 1][0].transcript
        transcript = transcript.split(break_words).map((entry) => entry.trim()).join("\n")
        $textarea.text($textarea.text() + transcript)
        setHeight($textarea);

      recognition.start()
      $start_btn.text("Restart Voice")

      $stop_btn.on "click", ->
        $start_btn.text("Voice Add")
        recognition.stop()

      $submit_btn.on "click", ->
        recognition.stop()
        content = $textarea.text()
        $.post(
          ruby_data.bulk_create_items_url,
          {
            text: content,
            authenticity_token: ruby_data.form_authenticity_token
          }
        )
